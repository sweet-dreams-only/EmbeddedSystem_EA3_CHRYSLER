<#@ AutosarXml processor="ArDirectiveProcessor" requires="arPrefix='ar';arNamespace='http://autosar.org/2.1.2'" #>
<#@ template inherits="AutosarDirectiveProcessor.ArGtcBase" debug="false" #>
<#@ output extension="" #>
<#@ include file="Helper.tt" #>
/*****************************************************************************
* Copyright 2010 Nxtr Automotive, All Rights Reserved.
* Nxtr Confidential
*
* Module File Name  : Metrics_Cfg.h
* Module Description: Configuration file of Metrics module
* Product           : Gen II Plus - EA3.0
* Generator         : <#= GeneratorName #> <#= GeneratorVersion #>
* Generation Time   : <#= DateTime.Now.ToString( "dd.MM.yyyy HH:mm:ss" ) #>
*****************************************************************************/
/* Version Control:
 * Date Created:      Fri Jul 13 18:34:17 2012
 * %version:          2 %
 * %date_modified:    Thu Aug 30 13:23:36 2012 %
 *---------------------------------------------------------------------------------------------------------------------
 * Date      Rev      Author         Change Description                                                        SCR #
 * -------   -------  --------  ---------------------------------------------------------------------------  ----------
 * 07/13/12   1       JJW       Initial template creation
 * 08/30/12   2       BWL       DET constant definition change, remove disable interrupts in runnables.
 */

#ifndef METRICS_CFG_H
#define METRICS_CFG_H

<#
	/* Generated Output Formatting Options*/
	const int COLWIDTH = 50;
	ChangeContext( Xp.ModuleConfAtDefRefTo( "Metrics" ) );
	string runnableTask = LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "OsTaskRef" ));
#>


/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/

/*** Public Part (used by Metrics API) *****************************************/
#include "Std_Types.h"                   /* Standard type definitions      */


/*** Private Part (used by Metrics.c only) *************************************/
#ifdef METRICS_C
<# bool apiEnableVersionInfo = ValueOf( Xp.ValueAtDefRefTo( "MetricsGeneral/MetricsVersionInfoApi" ) ); #>


#endif /* METRICS_C                                                            */


/*******************************************************************************
**                      Global Macros                                         **
*******************************************************************************/

/*** Public Part (Metrics API) *****************************************/

/*
 * File version information
 */
#define METRICS_CFG_H_MAJOR_VERSION   1u
#define METRICS_CFG_H_MINOR_VERSION   0u
#define METRICS_CFG_H_PATCH_VERSION   0u

/*
 * API enable settings
 */


/*
 * Event Definitions
 */


#include "Os.h" /* Required for choice of exclusive area protection */

/************ Metric Module Exclusive Area Protection *****************/
/* Task Start */
#define METRICS_ENTER_EXCLUSIVEAREA0	((void)(0)) /* area not configured because the resulting cpu usage was too high to collect metrics */
#define METRICS_EXIT_EXCLUSIVEAREA0		((void)(0))
/* Task End */
#define METRICS_ENTER_EXCLUSIVEAREA1	DisableAllInterrupts()
#define METRICS_EXIT_EXCLUSIVEAREA1		EnableAllInterrupts()
/* MainFunction Metrics Calculations */
#define METRICS_ENTER_EXCLUSIVEAREA2	SuspendAllInterrupts()
#define METRICS_EXIT_EXCLUSIVEAREA2		ResumeAllInterrupts()
/* Runnable Start */
#define METRICS_ENTER_EXCLUSIVEAREA3	((void)(0))
#define METRICS_EXIT_EXCLUSIVEAREA3		((void)(0))
/* Runnable End */
#define METRICS_ENTER_EXCLUSIVEAREA4	((void)(0))
#define METRICS_EXIT_EXCLUSIVEAREA4		((void)(0))

/******************* Metric Module Feature Enable *********************/
<# bool devErrorDetect = ValueOf( Xp.ValueAtDefRefTo( "MetricsGeneral/MetricsDevErrorDetect" ) ); #>
#define BC_METRICS_DET			<#= devErrorDetect ? "STD_ON" : "STD_OFF" #>
#define BC_METRICS_STACKUSE 	STD_ON
#define BC_METRICS_CPUUSEDIO	STD_ON
#define BC_METRICS_CPUUSETMR	STD_ON
#define BC_METRICS_RUNBLCPUUSE	STD_ON

/**************** Metric Module Measurement Constants *****************/
#define D_OSCONTEXTSWITCH_US_U32  	0U		/* Os context switching constant to be used to compensate runtime measurements */
#define D_HWSTARTUP_US_U16          55000U; /* Constant measured in CTP.  This is the time from Wakeup High to uP Reset High */
#define D_OSCILATORFREQ_MHZ_U16		20		/* Used to configure the rti during the initial startup phase to measure init timing */

/************************** Task IDs **************************/
#define D_MTRCTRLID_CNT                 osdNumberOfAllTasks
#define D_COMIRQ1_CNT                   (D_MTRCTRLID_CNT + 1)
#define D_COMIRQ2_CNT                 (D_COMIRQ1_CNT + 1)
#define D_COMIRQ3_CNT                 (D_COMIRQ2_CNT + 1)
#define D_SPIIRQ1_CNT                 (D_COMIRQ3_CNT + 1)
#define D_SPIIRQ2_CNT                 (D_SPIIRQ1_CNT + 1)
#define D_SPIIRQ3_CNT                 (D_SPIIRQ2_CNT + 1)
#define D_SPIIRQ4_CNT                 (D_SPIIRQ3_CNT + 1)
#define D_SPIIRQ5_CNT                 (D_SPIIRQ4_CNT + 1)
#define D_SPIIRQ6_CNT                 (D_SPIIRQ5_CNT + 1)
#define D_SPIIRQ7_CNT                 (D_SPIIRQ6_CNT + 1)
#define D_SPIIRQ8_CNT                 (D_SPIIRQ7_CNT + 1)
#define D_SPIIRQ9_CNT                 (D_SPIIRQ8_CNT + 1)
#define D_SPIIRQ10_CNT                (D_SPIIRQ9_CNT + 1)
#define D_SPIIRQ11_CNT                (D_SPIIRQ10_CNT + 1)
#define D_CROSSCHKID_CNT              (D_SPIIRQ11_CNT + 1)

#define D_RTSID_CNT                     (D_CROSSCHKID_CNT + 1)
#define d_NumberofTasks_Cnt_u16		    (D_RTSID_CNT + 1)

/************************** Runnable IDs **************************/
<#  
	ChangeContext( Xp.ModuleConfAtDefRefTo( "Rte" ) );
	int runnableId = 0;
#> 
<# !LOOP( Xp.ContainerAtDefRefTo( "SwComponentInstance" ) ) #>
<#
	string swcName = LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "ImplementationRef" ) );
	swcName = swcName.Replace("_Implementation", "");
#>
<# !LOOP( Xp.ContainerAtDefRefTo( "RunnableEntityMapping" ) ) #>
<#  
string mappedToTaskRef = LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "MappedToTaskRef" ));
if(0 == String.Compare(runnableTask, mappedToTaskRef,  false)) {
	string rteEventRef = LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "RTEEventRef" ));
	string runnable = "";
	string delim = "_";

	/* Assume the Application short name is the last "word" in the Os Application name delimited with '_' */
	string[] rteEventRefWords = rteEventRef.Split('_');
	foreach (string word in rteEventRefWords) {
		if((0 != String.Compare(word, "TMT", false)) && (0 != String.Compare(word, "InitEvent", false))) {
			runnable = runnable + word + delim;
		}
	}
	string runnableDefine = (runnable.ToUpper() + "ID");
#>
#define		<#=runnableDefine.PadRight(COLWIDTH)#><#=runnableId#>u
<#
	runnableId++;
}#>
<# !ENDLOOP #>
<# !ENDLOOP #>

/* Number of Monitored Runnables */
<#	string runnableNumDefine = "d_NumberofRunnables_Cnt_u16"; #>
#define		<#=runnableNumDefine.PadRight(COLWIDTH)#><#=runnableId#>u


/************************** Trace Config IDs **************************/
#define D_MAXTRACEEVT_CNT_U16	      150U /* Define the Maximum number of init trace points allowed to be captured */
#define D_TRACE_OSINIT_CNT_U16          1U
#define D_TRACE_ECUMINIT_CNT_U16        2U
#define D_TRACE_ECUSTARTUP1_CNT_U16     3U
#define D_TRACE_GPTINIT_CNT_U16         4U
#define D_TRACE_ECUSTARTUP1END_CNT_U16  5U
#define D_TRACE_ECUSTARTUP2_CNT_U16     6U
#define D_TRACE_NVMINIT_CNT_U16         7U
#define D_TRACE_NVMEND_CNT_U16          8U
#define D_TRACE_ECUSTARTUP2END_CNT_U16  9U
#define D_TRACE_FULLCOMM_CNT_U16       10U
#define D_TRACE_TXAVLPO_CNT_U16        11U
#define D_TRACE_FRINIT_CNT_U16         12U
#define D_TRACE_CODINGINIT_CNT_U16     13U
#define D_TRACE_XCPINIT_CNT_U16        14U

#define D_TRACE_ECUMMAINFCN_CNT_U16           15U
#define D_TRACE_CODINGMAINFCN_CNT_U16         16U
#define D_TRACE_COMRXMAINFCN_CNT_U16          17U
#define D_TRACE_COMTXMAINFCN_CNT_U16          18U
#define D_TRACE_COMROUTEMAINFCN_CNT_U16       19U
#define D_TRACE_COMMMAINFCN_CNT_U16           20U
#define D_TRACE_DARHMAINFCN_CNT_U16           21U
#define D_TRACE_DEMMAINFCN_CNT_U16            22U
#define D_TRACE_SPIHMAINFCN_CNT_U16           23U
#define D_TRACE_SPIDMAINFCN_CNT_U16           24U
#define D_TRACE_EEPMAINFCN_CNT_U16            25U
#define D_TRACE_EAMAINFCN_CNT_U16             26U
#define D_TRACE_NVMMAINFCN_CNT_U16            27U
#define D_TRACE_WDGM_MAINFCN_CNT_U16          28U

#define D_TRACE_FRIFMAINFCN_CNT_U16           30U
#define D_TRACE_FRTPMAINFCN_CNT_U16           31U
#define D_TRACE_FRTRCVMAINFCN_CNT_U16         32U
#define D_TRACE_FRSMMAINFCN_CNT_U16           33U
#define D_TRACE_SYSTIMECLIENTMAINFCN_CNT_U16  34U
#define D_TRACE_VSM_CLIENTMAINFCN_CNT_U16     35U
#define D_TRACE_FRXCPTXMAINFCN_CNT_U16        36U
#define D_TRACE_FRXCPRXMAINFCN_CNT_U16        37U
#define D_TRACE_DCMMAINFCN_CNT_U16            38U

#define D_TRACE_SYSTEMTICK_CNT_U16            39U

#define D_NUMTRACEPOINTS_CNT_U16		      40U

   
#endif /* METRICS_CFG_H */

/*** End of file **************************************************************/
